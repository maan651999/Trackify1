@model List<Trackify.Application.DTOs.BudgetReportDto>

<style>
    .dashboard-container {
        max-width: 1800px;
        width: 73%;
        min-height: 90vh;
        max-height: 96vh;
        margin: 0px 0px 0px 220px;
        /* Soft elegant background */
        background: linear-gradient(135deg, #FFFFFF, #C9CCDE, #B8B7C4);
        transition: margin-left 0.3s ease-in-out;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        overflow: visible !important;
        padding: 1.5rem 2rem 2rem 2rem;
        border-radius: 18px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(185, 183, 196, 0.4); /* subtle border in palette */
    }

    /* Table wrapper with card style */
    .table-responsive {
        max-height: 400px;
        overflow-y: auto;
        background: #ffffff; /* clean white card */
        border-radius: 12px;
        box-shadow: 0 4px 14px rgba(0, 0, 0, 0.05);
        border-left: 4px solid #74BF44; /* fresh green accent stripe */
    }

    /* Buttons consistent with new palette */
    .btn-custom {
        background: linear-gradient(135deg, #74BF44, #C9CCDE);
        color: #fff !important;
        padding: 8px 42px;
        font-size: 14px;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        border-radius: 6px;
        line-height: 1.2;
        border: none;
        box-shadow: 0 3px 10px rgba(116, 191, 68, 0.35);
        transition: all 0.3s ease;
    }

        .btn-custom:hover {
            opacity: 0.95;
            transform: translateY(-2px);
            background: linear-gradient(135deg, #C9CCDE, #74BF44);
            box-shadow: 0 5px 14px rgba(116, 191, 68, 0.45);
        }


        .btn-custom i {
            font-size: 16px;
        }

    .mt-6 {
        padding: 0;
        margin: 0;
    }

    .p-4 {
        padding: 1rem 2rem 2rem 2rem !important;
    }

    /* Table base */
    .budget-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 6px; /* row gap */
        background: #FFFFFF;
    }

        .budget-table thead {
            background: linear-gradient(135deg, #B8B7C4, #C9CCDE);
            color: #fff;
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 2;
            border-radius: 8px 8px 0 0;
        }

            .budget-table thead th {
                padding: 12px;
                text-align: center;
                font-size: 14px;
            }

        /* Table rows */
        .budget-table tbody tr {
            background: #FFFFFF;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
            border-radius: 8px;
            overflow: hidden;
            transition: all 0.2s ease;
        }

            .budget-table tbody tr:hover {
                background: #F8F9FB;
                transform: translateY(-2px);
            }

    /* Row states */
    .row-over {
        border-left: 5px solid #dc3545; /* danger red */
    }

    .row-within {
        border-left: 5px solid #74BF44; /* premium green */
    }

    /* Status badges */
    .status-over {
        color: #dc3545;
        font-weight: 600;
    }

    .status-within {
        color: #74BF44;
        font-weight: 600;
    }

    .budget-table thead {
        position: sticky;
        top: 0; /* always stick at top */
        z-index: 5; /* above tbody rows */
        background: linear-gradient(135deg, #B8B7C4, #C9CCDE);
        color: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08); /* subtle shadow */
    }

        .budget-table thead th {
            padding: 14px 12px;
            font-size: 14px;
            font-weight: 600;
            text-align: center;
            white-space: nowrap;
        }

</style>

<h1 class="budget-title">
    📊 Budget & Spending
</h1>
<canvas id="budgetChart" height="450"></canvas>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        const categories = @Html.Raw(Json.Serialize(Model.Select(m => m.Category)));
        const spent = @Html.Raw(Json.Serialize(Model.Select(m => m.SpentAmount)));
        const budget = @Html.Raw(Json.Serialize(Model.Select(m => m.BudgetAmount)));

                const ctx = document.getElementById('budgetChart').getContext('2d');
                const chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: categories,
                datasets: [
                    {
                        label: 'Spent',
                        data: spent,
                        backgroundColor: 'rgba(184, 183, 196, 0.9)', // #B8B7C4 (lavender gray)
                        borderColor: '#B8B7C4',
                        borderWidth: 1,
                        borderRadius: 6
                    },
                    {
                        label: 'Budget',
                        data: budget,
                        backgroundColor: 'rgba(116, 191, 68, 0.9)', // #74BF44 (premium green)
                        borderColor: '#74BF44',
                        borderWidth: 1,
                        borderRadius: 6
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        labels: {
                            color: '#3B3B3B', // dark gray text
                            font: {
                                weight: '600'
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#3B3B3B'
                        },
                        grid: {
                            color: '#C9CCDE' // light bluish gray grid
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#3B3B3B'
                        },
                        grid: {
                            color: '#E2E3EB' // soft light grid
                        }
                    }
                }
            }
        });
    </script>
}

@* @if (Model.Any(m => m.BudgetAmount - m.SpentAmount > 0))
{
    <div class="alert alert-info mt-4">
        You have saved ₹@Model.Sum(m => m.BudgetAmount - m.SpentAmount).ToString("0.00") this month.
        Consider moving it to savings 💰
    </div>
} *@

@* <h2 class="text-center mb-4">Budget Report - This Month</h2> *@

<div class="table-responsive" style="max-height: 498px; overflow-y: auto;">
    <table class="table table-hover mb-0 budget-table">
        <thead>
            <tr>
                <th>Category</th>
                <th>Budget</th>
                <th>Spent</th>
                <th>Utilization (%)</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="@(item.IsOverBudget ? "row-over" : "row-within")">
                    <td>
                        @{
                            string category = item.Category;
                            if (!string.IsNullOrEmpty(category) && category.StartsWith("*"))
                            {
                                <span style="color: red; font-weight: 900;">*</span>
                                @category.Substring(1).TrimStart()
                                // baaki ka naam normal dikhe
                            }
                            else
                            {
                                @category
                            }
                        }
                    </td>
                    <td>₹@item.BudgetAmount</td>
                    <td>₹@item.SpentAmount</td>
                    <td>@item.UtilizationPercent%</td>
                    <td>
                        @if (item.IsOverBudget)
                        {
                            <span class="status-over">Over Budget</span>
                        }
                        else
                        {
                            <span class="status-within">Within Budget</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>




